"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onPreDev = void 0;
const path_1 = require("path");
const execa_1 = __importDefault(require("execa"));
const fs_extra_1 = require("fs-extra");
const edge_1 = require("./edge");
const files_1 = require("./files");
// The types haven't been updated yet
const onPreDev = async ({ constants, netlifyConfig }) => {
    var _a;
    const base = (_a = netlifyConfig.build.base) !== null && _a !== void 0 ? _a : process.cwd();
    // Need to patch the files, because build might not have been run
    await (0, files_1.patchNextFiles)(base);
    //  Clean up old functions
    await (0, fs_extra_1.unlink)((0, path_1.resolve)('.netlify', 'middleware.js')).catch(() => {
        // Ignore if it doesn't exist
    });
    await (0, edge_1.writeDevEdgeFunction)(constants);
    if (!(0, fs_extra_1.existsSync)((0, path_1.resolve)(base, 'middleware.ts')) && !(0, fs_extra_1.existsSync)((0, path_1.resolve)(base, 'middleware.js'))) {
        console.log("No middleware found. Create a 'middleware.ts' or 'middleware.js' file in your project root to add custom middleware.");
    }
    else {
        console.log('Watching for changes in Next.js middleware...');
    }
    // Eventually we might want to do this via esbuild's API, but for now the CLI works fine
    const common = [`--bundle`, `--outdir=${(0, path_1.resolve)('.netlify')}`, `--format=esm`, `--target=esnext`, '--watch'];
    // TypeScript
    (0, execa_1.default)(`esbuild`, [...common, (0, path_1.resolve)(base, 'middleware.ts')], { all: true }).all.pipe(process.stdout);
    // JavaScript
    (0, execa_1.default)(`esbuild`, [...common, (0, path_1.resolve)(base, 'middleware.js')], { all: true }).all.pipe(process.stdout);
    // Don't return the promise because we don't want to wait for the child process to finish
};
exports.onPreDev = onPreDev;
